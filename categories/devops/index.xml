<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on James Bowman</title>
    <link>http://www.jamesbowman.me/categories/devops/index.xml</link>
    <description>Recent content in Devops on James Bowman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>All rights reserved 2017</copyright>
    <atom:link href="http://www.jamesbowman.me/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Continuous delivery tool landscape</title>
      <link>http://www.jamesbowman.me/post/continuous-delivery-tool-landscape/</link>
      <pubDate>Mon, 30 Jan 2017 08:34:52 +0000</pubDate>
      
      <guid>http://www.jamesbowman.me/post/continuous-delivery-tool-landscape/</guid>
      <description>

&lt;p&gt;I have been having a lot of discussions recently about tooling to support continuous delivery and DevOps practices.  There is an incredible and ever increasing array of tools available for these practices.  Whilst a number of vendors have developed &lt;a href=&#34;https://dzone.com/articles/continuous-delivery-anti-patterns&#34;&gt;one-stop solutions or suites of integrated tools&lt;/a&gt;, many of the tools in the space tend to be tightly focused on addressing a particular problem.&lt;/p&gt;

&lt;p&gt;Unfortunatley this can be confusing and overwhelming, especially to people starting out, making it difficult to know where to start and which tools to consider.  This can also lead to particular tools being used to solve problems where other types of tools may be better suited.  It is therefore important to consider tools within the context of the broader ecosystem and understand the role each one plays and the specific goal or problem(s) they aim to address.  With this in mind, I thought it might be useful to visualise the broader CD/DevOps tool landscape to provide some context around the available tools and how they each fit within it.&lt;/p&gt;

&lt;p&gt;You can see the complete visualisation here:&lt;/p&gt;


&lt;figure &gt;
    &lt;a href=&#34;http://www.jamesbowman.me/post/cdlandscape/ContinuousDeliveryToolLandscape-fullsize.jpeg&#34;&gt;
        &lt;img src=&#34;http://www.jamesbowman.me/post/cdlandscape/ContinuousDeliveryToolLandscape.jpeg&#34; alt=&#34;Continuous delivery tool landscape Jan 2017&#34; /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;


&lt;p&gt;I divided the landscape up into 5 high-level phases broadly aligned to a generic application lifecycle: Collaborate, Build, Test, Deploy and Run.  Within each phase, I then attempted to categorise the types of tools available.  Some tools within the same category address slightly different problems and can be considered complimentary to one another e.g. Terraform and Puppet/Chef.  Conversely, some of the tools e.g. MS Team Foundation Server, Go CD, Docker, etc. could appear in multiple categories.  Where this is the case, I have tried to place them once, in the primary category for which they are known.&lt;/p&gt;

&lt;h2 id=&#34;what-is-not-covered&#34;&gt;What is not covered&lt;/h2&gt;

&lt;p&gt;Whilst it would be great to show the entire landscape on one page some compromises had to be made and so some categories of tools were omitted.  These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service Discovery and global Configuration stores e.g. Consul, ZooKeeper, etcd, etc.&lt;/li&gt;
&lt;li&gt;Security management and monitoring tools (Privileged Account Management, intrusion detection, secret management and certificate management) e.g. CyberArk, Snort, Tripwire, Fortify, Vault, Letâ€™s Encrypt, etc.&lt;/li&gt;
&lt;li&gt;Static code analysis tools i.e. cyclometric complexity, coverage, quality, standards, etc.&lt;/li&gt;
&lt;li&gt;Programming languages, tools and frameworks e.g. compilers, IDEs, Frameworks like DropWizard/Nancy/etc.&lt;/li&gt;
&lt;li&gt;Mocking tools for testing e.g. Mockito&lt;/li&gt;
&lt;li&gt;Quality Management tools e.g. HPE QC&lt;/li&gt;
&lt;li&gt;Release Management tools e.g. LaunchDarkly&lt;/li&gt;
&lt;li&gt;Cloud vendor specific tools &amp;amp; toolchains e.g. Cloudformation and CodeDeploy for AWS&lt;/li&gt;
&lt;li&gt;Platform/Device specific development toolchains e.g. Native mobile apps, IoT, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;wrap-up&#34;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;The visualisation is not intended to be exhaustive or represent any form of recommendation or endorsement.  It would be interesting to hear other people&amp;rsquo;s perspectives and experiences.  Have you used other tools that belong in this visualisation?  Does the visualisation resonate with your own experiences and have you used some of the tools shown?  Are there any categories you feel missing?  If so, please comment and share your thoughts and experiences.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Standardisation in the Enterprise</title>
      <link>http://www.jamesbowman.me/post/standardisation-in-the-enterprise/</link>
      <pubDate>Tue, 09 Feb 2016 07:49:02 +0000</pubDate>
      
      <guid>http://www.jamesbowman.me/post/standardisation-in-the-enterprise/</guid>
      <description>

&lt;p&gt;In enterprises there is often a strong desire to standardise.  The reasoning is simple: if we are all doing things the same way, using the same technology, then we can simplify our operations, benefit from economies of scale and make our people more fungible.  So by extension, not standardising means duplicated effort, resources and expenditure.  But are things really this clear cut?&lt;/p&gt;

&lt;p&gt;Perhaps we should begin by thinking about the meaning of the word standardisation and understanding the alternatives.  &lt;a href=&#34;https://en.wikipedia.org/wiki/Standardization&#34;&gt;Wikipedia defines standardisation&lt;/a&gt; as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Standardization or standardisation is the process of implementing and developing technical standards. Standardization can help to maximize compatibility, interoperability, safety, repeatability, or quality. It can also facilitate commoditization of formerly custom processes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As an interesting aside, there is no mention of &lt;em&gt;uniformity&lt;/em&gt; in this definition even though the two terms are frequently used synonomously in many enterprises.  Standardisation is often interpreted as application standardisation - normalising and consolidating to uniform, and often centralised, applications and tools.  However, it is important to note there are other types of standards beyond applications - more on these later.&lt;/p&gt;

&lt;p&gt;Most Thesaurus&amp;rsquo; would say the opposite of the word standardisation is &lt;em&gt;deviation&lt;/em&gt; which conjours up all sorts of negative conotations.  I would argue that more accurate words to describe the opposite of standardisation, in this context, are &lt;em&gt;diversification&lt;/em&gt; and &lt;em&gt;customisation&lt;/em&gt;.  And, unlike &lt;em&gt;deviation&lt;/em&gt;, it turns out there are many benefits to diversification and customisation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lower risk&lt;/strong&gt; - reduced exposure to a single key technology, application or supplier&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increased responsiveness and agility&lt;/strong&gt; - greater autonomy with fewer dependencies and lower impact of change&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Potentially increased productivity and/or revenue&lt;/strong&gt; - tailoring of experience, applications, practices and processes to best suit territories, teams and customers involved&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So it seems that both approaches (standardisation and customisation/diversification) have their own, albeit different, sets of benefits and drivers.  Standardisation is often bourne out of attempts to optimise the bottom line (costs) where as diversification and customisation tend to come about when optimising the top line (revenue).  Of course in reality, things are much more complicated.&lt;/p&gt;










&lt;blockquote&gt;
&lt;a class=&#34;bloglogo&#34; href=&#34;#&#34; onclick=&#34;window.open(&#39;https://twitter.com/intent/tweet?text=%27Trying+to+reduce+costs+through+standardisation+often+simply+pushes+the+costs+elsewhere.%27+-+http%3A%2F%2Fwww.jamesbowman.me%2Fpost%2Fstandardisation-in-the-enterprise%2F%3Futm_source%3Dtwitter.com%26utm_campaign%3Dclicktotweet%26utm_medium%3Dsocial+by+%40jamesebowman&#39;, &#39;_blank&#39;, &#39;width=500,height=350&#39;); return false;&#34; style=&#34;text-decoration:none;&#34;&gt;
&lt;p&gt;Trying to reduce costs through standardisation often simply pushes the costs elsewhere.&lt;/p&gt;
&lt;span style=&#34;color:#00aced;&#34;&gt;&lt;span class=&#34;icon-twitter&#34; style=&#34;font-size:1.5em;&#34;&gt;&lt;/span&gt; Tweet this&lt;/span&gt;&lt;/a&gt;
&lt;/blockquote&gt;



&lt;p&gt;Trying to reduce costs through standardisation often simply pushes the costs elsewhere.  For example, consider an organisation comprising 5 separate business units.  Each business unit does similar things but is discreet, perhaps because they are based in different territories or perhaps because they were formerly part of other companies that were acquired.  Each business unit have their own application(s) supporting their own processes, product sets and data structures.  As part of any attempt to consolidate the 5 software applications into one standardised application the organisation must either:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Force all business units to adopt the same uniform, and potentially sub-optimal, business processes, product sets and data structures that will be, by definition, a compromise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;or&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deal with the complexity and costs of supporting the 5 divergent business processes, product sets and data structures within a single application.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Neither of these options is particular appealing and may ironically cause an increase in cost rather than the desired reduction.  Furthermore, any changes to the application for a particular business unit must now be funneled along with all the changes for the 4 other business units and their impact considered for all 5 business units.  This will result in higher costs and significantly increased lead times for changes.&lt;/p&gt;

&lt;p&gt;This phenomonon is often explained using an adage called &lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_law&#34;&gt;Conway&amp;rsquo;s Law&lt;/a&gt;.  It states that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Any organisation that designs a system (defined more broadly here than just information systems) will inevitably produce a design whose structure is a copy of the organization&amp;rsquo;s communication structure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The adage illustrates the importance of considering the organisational structure and business processes alongside software applications.  If we attempt to consolidate systems without considering the teams using them we can create misalignment between the organisational structure and systems and incur significant costs as a result.  Clearly, in our increasingly competitive market environments, where businesses are trying to accelerate the development and rollout of new products and services, such costs and delays could lead to missed opportunities.&lt;/p&gt;

&lt;h2 id=&#34;platforms-the-best-of-both-worlds&#34;&gt;Platforms - the Best of Both Worlds?&lt;/h2&gt;

&lt;p&gt;Applications have predefined business logic and data structures that narrow their scope and restrict their ability to support divergent business processes and product sets.  In contrast, platforms focus on the truly common, commodity capabilities and separate out the variable logic and data structures, allowing them to diverge.  Platforms strike a balance between standardising and diversifying/customising by splitting the problem domain into that which is truly common (the platform) and that which should be allowed to diverge (the customised items on top of the platform).  Interestingly, platforms are usually driven out of a desire to accelerate product development rather than control costs.&lt;/p&gt;

&lt;p&gt;Platforms essentially represent a set of standards or constraints that all the things supported by the platform must conform to.  In return for conforming to these constraints, they are able to leverage all the facilities and capabilities offered by the supporting platform.  In principle, platforms could be built to support anything providing it conforms to the constraints imposed by the platform.  This could include applications, product sets or even business processes.&lt;/p&gt;

&lt;p&gt;Platforms are typically successful when they meet the following 3 criteria:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The platform is tightly focused and completely generalised with any variability pushed out into the items it supports.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;There is a clear and explicit contract between the platform and the items it supports clearly defining the constraints/standards they must conform to.&lt;/li&gt;
&lt;li&gt;The platform is mostly self-service, requiring minimal centralised administration or configuration.  This avoids hand-offs and bottlenecks with centralised teams.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;other-types-of-standards&#34;&gt;Other Types of Standards&lt;/h2&gt;

&lt;p&gt;Earlier on, I mentioned that we would later be looking at other types of standard beyond application standardisation.  If we think back to the definition earlier in the article we see that many types of standards could help enterprises including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Standards that help us treat things in a consistent way allowing us to build tooling, platforms (see above) and scale operationally (e.g. deployment, hosting, monitoring, etc.)&lt;/li&gt;
&lt;li&gt;Standards that help maximise compatibility and interoperability between software components, business units, etc.&lt;/li&gt;
&lt;li&gt;Standards to promote safety and to keep our assets secure&lt;/li&gt;
&lt;li&gt;Standards to ensure a high level of quality to limit our risk exposure and additional expenses&lt;/li&gt;
&lt;li&gt;Standards that promote consistent user experience to optimise usability and profit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically these types of standards are defined across the organisation and can help drive emergent behaviours.  These types of standards explicitly define the small set of things that must be consistent (to support tooling, interoperability, etc.) and leave everything else to vary, allowing teams autonomy and freedom to innovate.&lt;/p&gt;

&lt;h2 id=&#34;in-conclusion&#34;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;There are benefits to both standardising and diversifying/customising and rather than adopting a one size fits all approach, consider each application individually.  However, be wary of approaching standardisation as a means of cutting costs - you may end up simply pushing the costs elsewhere.  Where standardising is desired, you might wish to consider building platforms to support diversity and customisation whilst still reducing time to market by leveraging a focused, common platform.&lt;/p&gt;

&lt;p&gt;Consider rolling out lightweight standards across the enterprise to promote consistency in the areas that consistency is important (e.g. application integration, security, user experience, etc.) helping to accelerate product development but be careful not to restrict teams&amp;rsquo; autonomy or ability to innovate.&lt;/p&gt;

&lt;p&gt;Do any of the points in this article ring true with you?  Have you observed similar things in the companies you have worked for?  If so, please comment and share your experiences.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous delivery pipeline for blogging with Hugo and Wercker</title>
      <link>http://www.jamesbowman.me/post/cd-pipeline-for-blogging/</link>
      <pubDate>Mon, 06 Jul 2015 19:13:19 +0100</pubDate>
      
      <guid>http://www.jamesbowman.me/post/cd-pipeline-for-blogging/</guid>
      <description>

&lt;p&gt;This is the start of my new blog.  It is something I have been meaning to do for a long time but somehow never quite got around to.  Part of the problem for me was choosing a blogging platform and tool chain - I was overwhelmed by the number of different options available.  I know lots of people use platforms like &lt;a href=&#34;https://wordpress.com/&#34;&gt;Wordpress&lt;/a&gt; but I always liked the idea of static generators like &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently stumbled across &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;.  Hugo is a static generator like &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; where content (usually written in &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt;) is rendered offline as static HTML and then published to a hosting platform.  A benefit of this approach over using a platform like &lt;a href=&#34;https://wordpress.com/&#34;&gt;Wordpress&lt;/a&gt; is that the generated HTML can be hosted anywhere.  &lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; interested me in particular because it is written in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, which I am familiar with, and is reported to be extremely fast (important when waiting for content updates to render).  The steps I originally followed to setup my blog were inspired by &lt;a href=&#34;http://gohugo.io/tutorials/automated-deployments/&#34;&gt;the tutorial on the Hugo site&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;github-and-github-pages&#34;&gt;GitHub and GitHub Pages&lt;/h2&gt;

&lt;p&gt;I decided to use &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; to host the site since they offer a free personal site for each GitHub account and I intended to use &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; for the source content anyway so using the same service for both made sense.&lt;/p&gt;

&lt;p&gt;Although I am using GitHub to store both my source content and generated HTML, I wanted to keep them separate and so setup 2 new, empty repositories on GitHub:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;blog&lt;/code&gt; - to store the source content.  The name of this repository is not important but for the remainder of this post, I will refer to it as &amp;lsquo;blog&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;GitHub username&amp;gt;.github.io&lt;/code&gt; - to host the generated static HTML.  The name of this repository must exactly match the pattern shown (this is where Github Pages serves the site from).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I use Git on a regular basis to version code I write and am used to using the command line client.  Whilst the steps I describe in the rest of this post assume the use of a command line client, a graphical client could be used to carry out the same operations if preferred.  Either command line or graphical client can be downloaded from the following URL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hugo&#34;&gt;Hugo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt; is an open source static site generator developed in &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.  It is designed to be executed from the command line and it can be downloaded and installed locally.  It can be downloaded from the following URL:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;https://github.com/spf13/hugo/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once installed, it can be executed on the command line to setup an initial workspace for all source site content.  The following command will create a subdirectory called &lt;code&gt;blog&lt;/code&gt; within the current directory containing the initial workspace and directory structure for your Hugo site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the workspace has been created we will need to add it to our GitHub repository.  First, so that Git does not try to version control the generated HTML as part of this repository (we want to store that in our second repository) I created a &lt;code&gt;.gitignore&lt;/code&gt; file inside the &lt;code&gt;blog&lt;/code&gt; directory containing &lt;code&gt;/public&lt;/code&gt; (/public is the output directory to which our generated HTML will be written).  Then type the following from within the &lt;code&gt;blog&lt;/code&gt; directory to add the workspace to GitHub, substituting your GitHub username for &lt;code&gt;&amp;lt;Github username&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add -A .
git commit -m &amp;quot;initial commit&amp;quot;
git remote add origin https://github.com/&amp;lt;Github username&amp;gt;/blog.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo uses interchangeable &amp;lsquo;themes&amp;rsquo; to style generated websites.  There are a bunch of pre-developed themes to choose from on &lt;a href=&#34;https://github.com/spf13/hugoThemes/&#34;&gt;GitHub&lt;/a&gt;.  To add one of these themes simply clone it into a &lt;code&gt;theme&lt;/code&gt; folder under the content workspace as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir themes
cd themes
git clone URL_TO_THEME 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally edit the &lt;code&gt;config.toml&lt;/code&gt; file in the root of the content workspace and update the title and baseurl attributes to the title of your site and &lt;code&gt;http://&amp;lt;Github username&amp;gt;.github.io&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h3 id=&#34;creating-content&#34;&gt;Creating Content&lt;/h3&gt;

&lt;p&gt;Content in Hugo is stored under the &lt;code&gt;/content&lt;/code&gt; folder in the workspace.  To add new content, use the &lt;code&gt;hugo new&lt;/code&gt; command to create the file as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir content/post
hugo new post/hello.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new content &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt; file pre-populated with hugo meta-data in a header.&lt;/p&gt;

&lt;p&gt;Edit the markdown file to add markdown text below the +++ and when finished, change the &lt;code&gt;draft&lt;/code&gt; attribute in the header to &lt;code&gt;false&lt;/code&gt;.  Now commit and push changes up to Github.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add .
git commit
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;generating-the-html&#34;&gt;Generating the HTML&lt;/h3&gt;

&lt;p&gt;To generate the site from within the content workspace simply type the following command.  This will render the markdown content files as static HTML and place them in the &lt;code&gt;/public&lt;/code&gt; output folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo --theme=&amp;lt;theme folder name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The specified theme folder name must exactly match the local folder name of the cloned theme e.g. if you are using hyde, the theme will have been cloned into the folder &lt;code&gt;themes/hyde&lt;/code&gt; so the following command should be used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo --theme=hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;publishing-to-github-pages&#34;&gt;Publishing to GitHub Pages&lt;/h3&gt;

&lt;p&gt;Publishing to &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; is as simple as copying the /public directory (containing the generated website) and pushing the contents to the remote &lt;code&gt;&amp;lt;github username&amp;gt;.github.io&lt;/code&gt; repository.  GitHub Pages will then serve the HTML from that repository at the following URL: &lt;code&gt;http://&amp;lt;GitHub username&amp;gt;.github.io/&lt;/code&gt;.  As an alternative to copying the contents of the /public directory, one could simply create the /public directory as a symbolic link/shortcut to the local copy of the &lt;code&gt;&amp;lt;github username&amp;gt;.github.io&lt;/code&gt; repository.&lt;/p&gt;

&lt;p&gt;Here is the sequence of commands required to copy the /public directory and push to GitHub Pages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ../output
cd ../output
git init
git remote add origin git@github.com:&amp;lt;Github username&amp;gt;/&amp;lt;Github username&amp;gt;.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then to push each set of changes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ../output
cp -R ../blog/public/* . 
git add .
git commit -m &amp;quot;generated content&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have now &lt;a href=&#34;#creating-content&#34;&gt;created content&lt;/a&gt;, &lt;a href=&#34;#generating-the-html&#34;&gt;rendered it as HTML&lt;/a&gt; and &lt;a href=&#34;#publishing-to-github-pages&#34;&gt;published it&lt;/a&gt; to a live website.  This represents all of the component parts of a nice publishing workflow - lets automate it!&lt;/p&gt;

&lt;h2 id=&#34;automating-the-process-with-wercker&#34;&gt;Automating the process with Wercker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt; is a hosted &lt;a href=&#34;http://www.thoughtworks.com/continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt;/&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_delivery&#34;&gt;Continuous Delivery&lt;/a&gt; service that has a growing community developing reusable build and deployment pipelines.  It has existing Hugo and GitHub Pages integrations built by the Werker community making it ideal for my needs.&lt;/p&gt;

&lt;p&gt;Wercker is free to sign up for an account and you can sign up with your GitHub account.  Once registered, ensure that your account profile is connected to your GitHub account.  This can be achieved by clicking on your icon in the top right hand corner of the screen and then selecting &lt;code&gt;settings&lt;/code&gt;.  Then select &lt;code&gt;Git connections&lt;/code&gt; to connect your GitHub account.&lt;/p&gt;

&lt;p&gt;Now we can setup our pipeline by creating a new application.  Select &lt;code&gt;Create&lt;/code&gt; and select &lt;code&gt;Application&lt;/code&gt;.  Work through the process of setting up a new application selecting GitHub as the Git provider, and choosing &amp;lsquo;blog&amp;rsquo; as the repository.  Select yourself as the owner and configure access so that &lt;code&gt;wercker will checkout the code without using an SSH key&lt;/code&gt;.  Finally uncheck the &lt;code&gt;Docker enabled&lt;/code&gt; checkbox and click next step.  You can finally choose whether to make your pipeline public or private.  This is a personal choice and has no impact on how things work.  Werker will now start building your code.&lt;/p&gt;

&lt;p&gt;Now we need to create a &lt;code&gt;wercker.yml&lt;/code&gt; file in the root of the content workspace (/blog folder).  This file should contain the following:&lt;/p&gt;
box: wercker/default
build:
    steps:
        - arjen/hugo-build:
        version: 0.14
        theme: &lt;theme folder name&gt;
        config: config.toml
deploy:
    steps:
        - lukevivier/gh-pages@0.2.1:
        token: $GIT_TOKEN
        domain: &lt;GitHub username&gt;.github.io
        basedir: public
        repo: &lt;GitHub username&gt;/&lt;GitHub username&gt;.github.io

&lt;p&gt;Be careful to replace any text within &amp;lt;&amp;gt; with your actual values e.g. &lt;code&gt;&amp;lt;GitHub username&amp;gt;&lt;/code&gt; should be replaced with your specific GitHub username.  Once finished, commit and push the wercker.yml file to GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add wercker.yml
git commit -m &amp;quot;Add wercker.yml&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may have noticed that our wercker.yml file contained a variable: &lt;code&gt;$GIT_TOKEN&lt;/code&gt;.  This variable allows us to specify our GitHub access credentials for deploying to GitHub Pages outside of the pipeline and therefore keep them secret.  We will now set the value for this variable but first need to generate a GitHub access token.  Instructions for doing this can be found &lt;a href=&#34;https://help.github.com/articles/creating-an-access-token-for-command-line-use/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To set the value for the &lt;code&gt;$GIT_TOKEN&lt;/code&gt; variable, select the &lt;code&gt;settings&lt;/code&gt; tab within wercker.  Now select &lt;code&gt;pipeline&lt;/code&gt; and &lt;code&gt;Add new variable&lt;/code&gt;.  Enter &lt;code&gt;$GIT_TOKEN&lt;/code&gt; as the &lt;code&gt;Environment Variable&lt;/code&gt; and paste your generated GitHub token into the &lt;code&gt;value&lt;/code&gt; field.  Check the &lt;code&gt;protected&lt;/code&gt; check box so that the token is kept hidden and not displayed.  Finally click the &lt;code&gt;save&lt;/code&gt; button to complete the setup.&lt;/p&gt;

&lt;p&gt;Now everytime, you commit and push source content changes to the &lt;code&gt;blog&lt;/code&gt; repository, Wercker will automatically render the updated content as HTML and publish it to GitHub Pages.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>